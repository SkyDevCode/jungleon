<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.itgcms.core.stats.service.impl.MngrStatsMapper">

<!-- 	<resultMap id="statsMap" type="egovframework.itgcms.core.stats.service.MngrStatsVO">
		<result property="clIdx" column="cl_idx" />
		<result property="clAgent" column="cl_agent" />
		<result property="clOs" column="cl_os" />
		<result property="clBrowser" column="cl_browser" />
		<result property="clKeyword" column="cl_keyword" />
		<result property="clReferer" column="cl_referer" />
		<result property="clIp" column="cl_ip" />
		<result property="clLanguage" column="cl_language" />
		<result property="regdt" column="regdt" />
	</resultMap> -->
	<resultMap id="statsMap" type="egovframework.itgcms.core.stats.service.MngrStatsVO"/>
	<resultMap id="countMap" type="egovframework.itgcms.core.stats.service.MngrCountVO"/>

	<select id="mngrStatsList" resultMap="statsMap">
		SELECT
			cl_idx,     cl_agent,    cl_os,
			cl_browser, cl_keyword,  cl_referer,
			cl_ip,      cl_language, regdt
		FROM
			T_CONNECTION_LOG
		ORDER BY cl_idx desc
	</select>

<!-- 	<update id="mngrStatsUpdate" parameterType="egovframework.itgcms.core.stats.service.MngrStatsVO">
		/* mngrStatsUpdate */
		update
			T_CONNECTION_LOG
		set
			cl_keyword = #{clKeyword}

		where
			cl_idx = #{clIdx}
	</update> -->

<!-- 	<update id="mngrStatsUpdate" parameterType="egovframework.itgcms.core.stats.service.MngrStatsVO">
		/* mngrStatsUpdate */
		update
			T_CONNECTION_LOG
		set
			cl_language = #{clLanguage}

		where
			cl_idx = #{clIdx}
	</update> -->

	<!--
	 * 접속로그 저장
	 * @param mngrCountVO
	-->
	<insert id="mngrStatsInsert" parameterType="mngrStatsVO">
		insert into T_CONNECTION_LOG(
			<!-- cl_idx, -->
			cl_agent,
			cl_os,
			cl_browser,
			cl_keyword,
			cl_referer,
			cl_ip,
			cl_language,
			regdt
		 ) values(
			<!-- #{clIdx}, -->
			#{clAgent},
			#{clOs},
			#{clBrowser},
			#{clKeyword},
			#{clReferer},
			#{clIp},
			#{clLanguage},
			getdate()
		)
	</insert>

	<!--
	 * 날짜별 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="selectMngrDateCountList" resultMap="countMap">
	/** selectMngrDateCountList **/
		SELECT
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			cnt_hour,
			<if test="cntOption == 'HOUR'">etc as cnt_date,</if>
			<if test="cntOption == 'DAY'">LEFT(etc, 10) as cnt_date,</if>
			<if test="cntOption == 'MONTH'">LEFT(etc, 7) as cnt_date,</if>
			<if test="cntOption == 'YEAR'">LEFT(etc, 4) as cnt_date,</if>
			sum(cnt_count) cnt_count,
			etc
		FROM
			T_COUNT_DATE
		WHERE cnt_option = #{cntOption}
			<if test="cntOption == 'HOUR' or cntOption=='DAY' or cntOption=='MONTH'">AND cnt_year   = #{cntYear}</if>
		    <if test="cntOption == 'HOUR' or cntOption=='DAY'">AND cnt_month  = #{cntMonth}</if>
		    <if test="cntOption == 'HOUR'">AND cnt_day  = #{cntDay}</if>
		    <if test="siteCode != 'all'">AND site_code  = #{siteCode}</if>
		GROUP BY cnt_option, cnt_year, cnt_month, cnt_day, cnt_hour, etc
		ORDER BY cnt_year asc, cnt_month asc, cnt_day asc
	</select>

	<!--
	 * 기간별 통계정보 리스트(관리자메인)
	 * @param mngrCountVO
	-->
	<select id="mngrTermCountListforMain" resultMap="countMap">
	/**mngrTermCountListforMain**/
		SELECT
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			sum(cnt_count) cnt_count,
			etc
		FROM T_COUNT_DATE
		WHERE cnt_option = #{cntOption} and ETC between #{startDate} and #{endDate}
		GROUP BY cnt_option, cnt_year, cnt_month, cnt_day, etc
		ORDER BY etc ASC
	</select>

	<!--
	 * 기간별 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="selectMngrTermCountList" resultMap="countMap">
	/**mngrTermCountList**/
		SELECT  
				A.cd_idx,
				A.cnt_option,
				<if test="cntOption == 'HOUR'">A.cnt_hour as cnt_date,</if>
				<if test="cntOption == 'DAY'">A.cnt_day as cnt_date,</if>
				<if test="cntOption == 'MONTH'">A.cnt_month as cnt_date,</if>
				<if test="cntOption == 'YEAR'">A.cnt_year as cnt_date,</if>
				A.cnt_count,
				A.etc,
				A.site_code
		  FROM (
				SELECT
					cd_idx,
					cnt_option,
					<if test="cntOption == 'HOUR'">cnt_hour,</if>
					<if test="cntOption == 'DAY'">cnt_day,</if>
					<if test="cntOption == 'MONTH'">cnt_month,</if>
					<if test="cntOption == 'YEAR'">cnt_year,</if>
					sum(CNT_COUNT) as cnt_count,
					etc,
					site_code
				FROM
					T_COUNT_DATE
				WHERE cnt_option = #{cntOption}
				  and ETC between #{startDate} and #{endDate}
			  	<if test="siteCode != 'all'">AND site_code  = #{siteCode}</if>
			  	GROUP BY  cd_idx, cnt_option
					<if test="cntOption == 'HOUR'">,cnt_hour</if>
					<if test="cntOption == 'DAY'">,cnt_day</if>
					<if test="cntOption == 'MONTH'">,cnt_month</if>
					<if test="cntOption == 'YEAR'">,cnt_year</if>
					,etc, site_code
				) A
		 WHERE A.cd_idx IS NOT NULL
		 ORDER BY etc asc, cnt_date ASC
	</select>

	<!--
	 * 기간별 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="mngrTermCountByDayOfWeekList" resultMap="countMap">
	/** mngrTermCountByDayOfWeekList **/
		select
			dayweek as etc,
			dataTable.cnt_count,
			case dataTable.dayweek
				when '1' then '일요일'
				when '2' then '월요일'
				when '3' then '화요일'
				when '4' then '수요일'
				when '5' then '목요일'
				when '6' then '금요일'
				when '7' then '토요일'
			end as cnt_date
			from (
				select
					sum(cnt_count) as cnt_count, dayweek
				from (
					SELECT
						cnt_count,
						datepart(dw, convert(date, CNT_YEAR + '-' + CNT_MONTH + '-' + CNT_DAY)) as dayweek
					FROM
						t_count_date
					where
					CNT_OPTION = 'DAY'
					and CNT_YEAR + '-' + CNT_MONTH + '-' + CNT_DAY
					between #{startDate} and #{endDate}
					) a
				group by a.dayweek
			) as dataTable
		order by dayweek
	</select>

	<!--
	 * 날짜별 통계정보 저장
	 * @param mngrCountVO
	-->
	<insert id="mngrDateCountInsert" parameterType="mngrCountVO">
		/* mngrDateCountInsert */
		insert into T_COUNT_DATE(
			<!-- cd_idx, -->
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			cnt_hour,
			<!-- cnt_count, -->
			site_code,
			etc
		 ) values(
			<!-- #{cDIdx}, -->
			#{cntOption},
			#{cntYear},
			#{cntMonth},
			#{cntDay},
			#{cntHour},
			#{siteCode},
			<!-- #{cntCount}, -->
			#{etc}
		)
	</insert>

	<!--
	 * 날짜별 통계정보 업데이트
	 * @param mngrCountVO
	-->
	<update id="mngrDateCountUpdate" parameterType="mngrCountVO">
		/* mngrDateCountUpdate */
		update
			T_COUNT_DATE
		set
			cnt_count = cnt_count+1
		where
			cnt_option = #{cntOption}
			and cnt_year = #{cntYear}
			and cnt_month = #{cntMonth}
			and cnt_day = #{cntDay}
			and cnt_hour = #{cntHour}
			and site_code = #{siteCode}
	</update>

	<!--
	 * 옵션별 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="selectMngrOptionCountList" resultMap="countMap">
		/* selectMngrOptionCountList */
		SELECT
			cnt_option,
			cnt_name,
			SUM(cnt_count) AS cnt_count,
			etc
		FROM
			T_COUNT_OPTION
		WHERE cnt_option = #{cntOption}
		 <if test="siteCode != 'all'">AND site_code  = #{siteCode}</if>
		GROUP BY cnt_name, cnt_option, etc
		ORDER BY cnt_count DESC
	</select>

	<!--
	 * 옵션별 통계정보 저장
	 * @param mngrCountVO
	-->
	<insert id="mngrOptionCountInsert" parameterType="mngrCountVO">
		/* mngrOptionCountInsert */
		insert into T_COUNT_OPTION(
			<!-- co_idx, -->
			cnt_option,
			cnt_name,
			cnt_year,
			cnt_month,
			cnt_day,
			site_code,
			<!-- cnt_count, -->
			etc
		 ) values(
			<!-- #{cDIdx}, -->
			#{cntOption},
			#{cntName},
			#{cntYear},
			#{cntMonth},
			#{cntDay},
			#{siteCode},
			<!-- #{cntCount}, -->
			#{etc}
		)
	</insert>

	<!--
	 * 옵션별 통계정보 업데이트
	 * @param mngrCountVO
	-->
	<update id="mngrOptionCountUpdate" parameterType="mngrCountVO">
		/* mngrOptionCountUpdate */
		update
			T_COUNT_OPTION
		set
			cnt_count = cnt_count+1
		where
			cnt_option = #{cntOption}
			and cnt_name = #{cntName}
			and cnt_year = #{cntYear}
			and cnt_month = #{cntMonth}
			and cnt_day = #{cntDay}
			and site_code = #{siteCode}
	</update>

	<!--
	 * 메뉴별 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="selectMngrMenuCountList" resultMap="countMap">
	/* selectMngrMenuCountList */
	SELECT  A.cm_idx,
			A.cnt_option,
			A.cnt_name,
			A.cnt_year,
			A.cnt_month,
			A.cnt_day,
			A.cnt_count,
			A.etc,
			B.menu_pfullname as menu_full_name,
			B.menu_name,
			A.site_code
	  FROM (
			SELECT 	cm_idx,
					cnt_option,
					cnt_name,
					cnt_year,
					cnt_month,
					cnt_day,
					etc,
					sum(CNT_COUNT) as cnt_count,
					site_code
			  FROM  T_COUNT_MENU
			 WHERE  cnt_option = #{cntOption}
			   and  RIGHT(etc, 10) BETWEEN #{startDate} AND #{endDate}
			   <if test="siteCode != 'all' and siteCode != ''"> <!--  해당 년 월 -->
		          and site_code = #{siteCode}
		     </if>
			 GROUP BY cm_idx, cnt_option, cnt_name, cnt_year, cnt_month, cnt_day, etc, site_code
			) A
	  LEFT JOIN T_MENU B on A.cnt_name = B.menu_code
	 WHERE A.cm_idx IS NOT NULL
	ORDER BY cnt_count DESC
	</select>

	<!--
	 * 메뉴별 통계정보 저장
	 * @param mngrCountVO
	-->
	<insert id="mngrMenuCountInsert" parameterType="mngrCountVO">
		/* mngrOptionCountInsert */
		insert into T_COUNT_MENU(
			<!-- cm_idx, -->
			cnt_option,
			cnt_name,
			cnt_year,
			cnt_month,
			cnt_day,
			site_code,
			<!-- cnt_count, -->
			etc
		 ) values(
			<!-- #{cMIdx}, -->
			#{cntOption},
			#{cntName},
			#{cntYear},
			#{cntMonth},
			#{cntDay},
			#{siteCode},
			<!-- #{cntCount}, -->
			#{etc}
		)
	</insert>

	<!--
	 * 메뉴별 통계정보 업데이트
	 * @param mngrCountVO
	-->
	<update id="mngrMenuCountUpdate" parameterType="mngrCountVO">
		/* mngrOptionCountUpdate */
		update
			T_COUNT_MENU
		set
			cnt_count = cnt_count+1
		where
			cnt_option = #{cntOption}
			and cnt_name = #{cntName}
			and cnt_year = #{cntYear}
			and cnt_month = #{cntMonth}
			and cnt_day = #{cntDay}
			and site_code = #{siteCode}
	</update>

	<!--
     * 관리자 메인 접속 카운트 조회
     * @param mngrCountVO
    -->
	<select id="getTodayVisitCount" resultType="int">
	/* getTodayVisitCount */
    SELECT
	    ISNULL(sum(CNT_COUNT), 0) as cnt_count
    FROM
        T_COUNT_DATE
    WHERE
       <choose>
            <when  test="cntOption == 'YEAR_GROUP'">
                <!-- 연도를 group by 하면 전체 접속 카운트가 됨. -->
		          cnt_option = 'YEAR'
		          /* group by CNT_COUNT */
            </when>
            <otherwise>
                cnt_option = #{cntOption}
                <if test="cntOption == 'YEAR'"> <!-- 해당연도 -->
		           and cnt_year = #{cntYear}
		        </if>
		        <if test="cntOption == 'MONTH'"> <!--  해당 년 월 -->
		           and cnt_year = #{cntYear}
		           and cnt_month = #{cntMonth}
		        </if>
		        <if test="cntOption == 'DAY'"> <!--  해당 년 월 일 -->
		           and cnt_year = #{cntYear}
		           and cnt_month = #{cntMonth}
		           and cnt_day = #{cntDay}
		        </if>
            </otherwise>
       </choose>
	</select>

	<select id="selectMngrBoardStats" resultType="itgMap">
	/* selectMngrBoardStats */
		select
			m.menu_code,
			m.menu_name,
		    m.menu_pfullname,
		    c.bc_id,
		    (select count(1) from t_board as b where bc_id=c.bc_id) as count_list,
		    isnull((select sum(bd_readnum) from t_board as b where bc_id=c.bc_id), 0) as sum_read_num
		from t_menu as m, t_board_config as c
		where
			menu_sitecode = #{siteCode}
			and m.menu_subType = c.bc_id
			order by count_list desc
	</select>

	<select id="mngrAgeGroupStats" resultType="map">
		select
			count(1) as num,
		    case
				when age&lt;10 then '10대 미만'
		        when age&lt;20 then '10대'
		        when age&lt;30 then '20대'
		        when age&lt;40 then '30대'
		        when age&lt;50 then '40대'
		        when age&lt;60 then '50대'
		        else '60대 이상'
			end as ageGroup
		from
			(SELECT
				l.log_id,
				l.log_regdt,
				((left(convert(varchar(10), getdate(), 120), 4)+0)-(left(m.birth, 4)+0)) as age
			FROM
				t_login_log as l, t_member as m
			where
				l.log_type=2
				and l.log_id = m.id
				<if test="siteCode != 'all'">AND log_site = #{siteCode}</if>
		        <if test="cntOption == 'DAY'">and convert(varchar, l.log_regdt, 23)</if>
				<if test="cntOption == 'MONTH'">and left(convert(varchar, l.log_regdt, 23), 7)</if>
				<if test="cntOption == 'YEAR'">and left(convert(varchar, l.log_regdt, 23), 4)</if>
				BETWEEN  #{startDate} and #{endDate}
		        ) innerTable
		 group by ageGroup
	</select>

	<!--
	 * SNS 통계정보 저장
	 * @param itgMap
	-->
	<insert id="mngrSnsCountInsert" parameterType="itgMap">
		/* mngrSnsCountInsert */
		insert into T_COUNT_SNS(
			<!-- cs_idx, -->
			cnt_name,
			cnt_url,
			cnt_sm_name,
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			<!-- #{cntCount}, -->
			site_code,
			etc
		 ) values(
			<!-- #{csIdx}, -->
			#{cntName},
			#{cntUrl},
			#{cntSmName},
			#{cntOption},
			#{cntYear},
			#{cntMonth},
			#{cntDay},
			<!-- #{cntCount}, -->
			#{siteCode},
			#{etc}
		)
	</insert>

	<!--
	 * SNS 통계정보 업데이트
	 * @param itgMap
	-->
	<update id="mngrSnsCountUpdate" parameterType="itgMap">
		/* mngrSnsCountUpdate */
		update
			T_COUNT_SNS
		set
			cnt_count = cnt_count+1
		where
			cnt_name = #{cntName}
			AND cnt_url = #{cntUrl}
			AND cnt_sm_name = #{cntSmName}
			AND cnt_option = #{cntOption}
			AND cnt_year = #{cntYear}
			AND cnt_month = #{cntMonth}
			AND cnt_day = #{cntDay}
			AND site_code = #{siteCode}
	</update>

	<!--
	 * SNS 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="selectMngrSnsCountList" resultType="itgMap" parameterType="mngrCountVO">
	/* selectMngrSnsCountList */
	SELECT
		A.cs_idx,
		A.cnt_name,
		A.cnt_url,
		A.cnt_sm_name,
		A.cnt_option,
		A.cnt_year,
		A.cnt_month,
		A.cnt_day,
		A.cnt_count,
		A.site_code,
		A.etc,
		B.menu_pfullname as menu_full_name,
		B.menu_name
	FROM (
		SELECT
			cs_idx,
			cnt_name,
			cnt_url,
			cnt_sm_name,
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			sum(CNT_COUNT) as cnt_count,
			site_code,
			etc
		FROM  T_COUNT_sns
		WHERE cnt_option = #{cntOption}
		 <if test="cntOption != 'TOTAL' and cntOption != ''">
			  and  etc BETWEEN #{startDate} AND #{endDate}
		 </if>
		 <if test="siteCode != 'all' and siteCode != ''">
		      and site_code = #{siteCode}
		 </if>
		GROUP BY
			cs_idx,
			cnt_name,
			cnt_url,
			cnt_sm_name,
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			site_code,
			etc
		) A
	LEFT JOIN T_MENU B on A.cnt_name = B.menu_code
	WHERE A.cs_idx IS NOT NULL
	ORDER BY cnt_count DESC
	</select>

	<!--
	 * 팝업 통계정보 저장
	 * @param itgMap
	-->
	<insert id="mngrPopupCountInsert" parameterType="itgMap">
		/* mngrPopupCountInsert */
		insert into T_COUNT_POPUP(
			<!-- cp_idx, -->
			pop_idx,
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			<!-- #{cnt_count}, -->
			site_code,
			etc
		 ) values(
			<!-- #{cpIdx}, -->
			#{popIdx},
			#{cntOption},
			#{cntYear},
			#{cntMonth},
			#{cntDay},
			<!-- #{cntCount}, -->
			#{siteCode},
			#{etc}
		)
	</insert>

		<!--
	 * 팝업 통계정보 업데이트
	 * @param itgMap
	-->
	<update id="mngrPopupCountUpdate" parameterType="itgMap">
		/* mngrPopupCountUpdate */
		update
			T_COUNT_POPUP
		set
			cnt_count = cnt_count+1
		where
			pop_idx = #{popIdx}
			AND cnt_option = #{cntOption}
			AND cnt_year = #{cntYear}
			AND cnt_month = #{cntMonth}
			AND cnt_day = #{cntDay}
			AND site_code = #{siteCode}
	</update>

		<!--
	 * 팝업 통계정보 리스트
	 * @param mngrCountVO
	-->
	<select id="selectMngrPopupCountList" resultType="itgMap" parameterType="mngrCountVO">
	/* selectMngrPopupCountList */
	SELECT
		A.cp_idx,
		A.pop_idx,
		A.cnt_option,
		A.cnt_year,
		A.cnt_month,
		A.cnt_day,
		A.cnt_count,
		A.site_code,
		A.etc,
		B.popup_type,
		B.popup_title
	FROM (
		SELECT
			cp_idx,
			pop_idx,
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			sum(cnt_count) as cnt_count,
			site_code,
			etc
		FROM  T_COUNT_POPUP
		WHERE cnt_option = #{cntOption}
		 <if test="cntOption != 'TOTAL' and cntOption != ''">
			  and  etc BETWEEN #{startDate} AND #{endDate}
		 </if>
		 <if test="siteCode != 'all' and siteCode != ''">
		      and site_code = #{siteCode}
		 </if>
		GROUP BY 
			cp_idx,
			pop_idx,
			cnt_option,
			cnt_year,
			cnt_month,
			cnt_day,
			site_code,
			etc
		) A
	LEFT JOIN T_POPUP B on A.pop_idx = B.popup_idx
	<if test="popupType != 'all' and popupType != ''">
		WHERE popup_type = #{popupType}
	</if>
	ORDER BY cnt_count DESC
	</select>

</mapper>
